# https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_security_group_module.html
- name: Creating Security Group
  delegate_to: localhost
  register: basic_firewall
  amazon.aws.ec2_security_group:
    name: "{{ sec_group_name }}"
    description: sg giropops
    profile: "{{ aws_profile }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
        rule_desc: SSH
      - proto: tcp
        from_port: 2379
        to_port: 2380
        cidr_ip: 0.0.0.0/0
        rule_desc: etcd server API
      - proto: tcp
        from_port: 6443
        to_port: 6443
        cidr_ip: 0.0.0.0/0
        rule_desc: kube-apiserver
      - proto: tcp
        from_port: 10250
        to_port: 10250
        cidr_ip: 0.0.0.0/0
        rule_desc: Kubelet API
      - proto: tcp
        from_port: 10251
        to_port: 10251
        cidr_ip: 0.0.0.0/0
        rule_desc: kube-scheduler
      - proto: tcp
        from_port: 10252
        to_port: 10252
        cidr_ip: 0.0.0.0/0
        rule_desc: kube-controller-manager
      - proto: tcp
        from_port: 10255
        to_port: 10255
        cidr_ip: 0.0.0.0/0
        rule_desc: Kubelet API Read-only
      - proto: tcp
        from_port: 30000
        to_port: 32767
        cidr_ip: 0.0.0.0/0
        rule_desc: NodePort Services
      - proto: tcp
        from_port: 6783
        to_port: 6783
        cidr_ip: 0.0.0.0/0
        rule_desc: WeaveNet
      - proto: udp
        from_port: 6783
        to_port: 6783
        cidr_ip: 0.0.0.0/0
        rule_desc: Weavenet
      - proto: udp
        from_port: 6784
        to_port: 6784
        cidr_ip: 0.0.0.0/0
        rule_desc: Weavenet
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
# https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_module.html
- name: Creating ec2 instance
  delegate_to: localhost
  register: ec2
  amazon.aws.ec2_instance:
    security_group: "{{ sec_group_name }}" # sg-xpto
    instance_type: "{{ instance_type }}" # t2.micro
    image_id: "{{ image }}" # ami-0d5eff06f840b45e9
    profile: "{{ aws_profile }}"
    wait: true
    region: "{{ region }}" # us-east-1
    key_name: "{{ key_name }}" # foo.pem
    count: "{{ count }}"
# #debug output ec2 var
# - debug:
#     var: ec2
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/add_host_module.html
- name: Adding instance to in-memory inventory host group
  delegate_to: localhost
  with_items: "{{ ec2.instances }}" # do task for each instance
  ansible.builtin.add_host:
    name: "{{ item.public_ip_address }}"
    groups:
      - giropops-new
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html
- name: Adding the public IP of the created instance to hosts file
  delegate_to: localhost
  with_items: "{{ ec2.instances }}" # do task for each instance
  ansible.builtin.lineinfile:
    path: "./hosts.ini"
    regexp: "{{ item.public_ip_address }}"
    insertafter: "[kubernetes]"
    line: "{{ item.public_ip_address }}"
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/lineinfile_module.html
- name: Adding the private IP of the created instance to hosts file
  delegate_to: localhost
  with_items: "{{ ec2.instances }}" # do task for each instance
  ansible.builtin.lineinfile:
    path: "./hosts.ini"
    regexp: "{{ item.private_ip_address }}"
    insertafter: "[kubernetes]"
    line: "{{ item.private_ip_address }}"
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_module.html
- name: Waiting for SSH to come up # pause ansible pipeline until ssh is up
  delegate_to: localhost
  with_items: "{{ ec2.instances }}"
  ansible.builtin.wait_for:
    host: "{{ item.public_ip_address }}"
    port: 22
    state: started
# https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_tag_module.html
- name: Adding a tag to the instance
  delegate_to: localhost
  with_items: "{{ ec2.instances }}"
  amazon.aws.ec2_tag:
    resource: "{{ item.instance_id }}"
    region: "{{ region }}"
    profile: "{{ aws_profile }}"
    state: present
    tags:
      Name: ansible-{{ item.ami_launch_index | int + 1 }} # ansible-1, ansible-2, etc
